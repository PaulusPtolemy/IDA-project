import { getVehicles } from '~/static/request'
export const state = () => ({
  data: null,
  errorOnLoad: null,
  user: {
    name: 'Bessie Cooper',
    avatar: '\n'
  },
  showPopup: false,
  currentLot: null,
  currentLotTab: null,
  modeColor: null
})

export const getters = {
  //
}

export const mutations = {
  SET_DATA (state, payload) {
    state.data = payload
  },
  SET_POPUP (state, payload) {
    state.showPopup = payload
  },
  SET_ITEM (state, payload) {
    state.data.push(payload)
  },
  SET_CURRENT_LOT (state, payload) {
    state.currentLot = payload
  },
  SET_CURRENT_LOT_TAB (state, payload) {
    state.currentLotTab = payload
  },
  SET_COLOR_MODE (state, payload) {
    state.modeColor = payload
  }
}

export const actions = {
  async GET_DATA_ACT ({ commit }) {
    const data = await getVehicles()
    commit('SET_DATA', data)
  },

  ACT_SET_POPUP ({ commit }, val) {
    commit('SET_POPUP', val)
  },

  ACT_SET_ITEM ({ commit }, data) {
    commit('SET_ITEM', data)
  },

  async ACT_CURRENT_LOT ({ commit, dispatch, state }, { route }) {
    if (!state.data) {
      await dispatch('GET_DATA_ACT')
    }
    const lot = state.data.find(e => e.id === route.params.id)
    commit('SET_CURRENT_LOT', lot)
    return state.currentLot
  },
  async ACT_CURRENT_LOT_TAB ({ commit, dispatch, state }, { route }) {
    if (!state.data) {
      await dispatch('GET_DATA_ACT')
    }
    const tabName = `${route.params.slug}_text`
    const lot = state.data.find(e => e.id === route.params.id)
    const tab = {
      label: tabName,
      data: lot[tabName]
    }
    commit('SET_CURRENT_LOT_TAB', tab)
    return state.currentLotTab
  },

  ACT_COLOR_MODE ({ commit }, data) {
    commit('SET_COLOR_MODE', data)
  }
}
